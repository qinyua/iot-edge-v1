# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pool:
  vmImage: 'Ubuntu 16.04'

steps:
- script: |
    sudo apt-get update
    # target libssl 1.0 until we can update our azure-iot-sdk-c dependency to a newer version that accepts libssl 1.1
    libssl_version=$(apt-cache madison libssl-dev | grep -e "libssl-dev | 1.0" | head -1 | awk '{print $3}')
    sudo apt-get install -y --allow-downgrades libcurl4-openssl-dev uuid-dev libssl-dev=$libssl_version
  displayName: Install prerequisites

- task: DownloadBuildArtifacts@0
  displayName: Get Node.js
  inputs:
    buildType: specific
    project: iotedge
    pipeline: v1 Node.js Library
    buildVersionToDownload: latestFromBranch
    branchName: refs/heads/master
    downloadType: single
    artifactName: nodejs
    downloadPath: $(System.DefaultWorkingDirectory)
    parallelizationLimit: 8

- script: |
    NODE_INCLUDE="$(pwd)/nodejs/inc"
    NODE_LIB="$(pwd)/nodejs/lib"
    v1/tools/build.sh --run-unittests --enable-nodejs-binding --enable-java-binding --enable-dotnet-core-binding --enable-java-remote-modules
  displayName: Run the build

- task: CopyFiles@2
  displayName: Collect build logs
  condition: always()
  inputs:
    SourceFolder: v1/deps
    Contents: "**/build/?(output.txt|error.txt)"
    TargetFolder: $(Build.ArtifactStagingDirectory)

- task: PublishBuildArtifacts@1
  displayName: Publish build logs
  condition: always()
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)
    ArtifactName: build logs
    Parallel: true
    ParallelCount: 8